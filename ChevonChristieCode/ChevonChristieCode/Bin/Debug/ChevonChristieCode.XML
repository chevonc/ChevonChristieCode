<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChevonChristieCode</name>
    </assembly>
    <members>
        <member name="T:ChevonChristieCode.Misc.CustomTimer">
            <summary>
            A timer modeled off silverlight's DispatcherTimer. It can be setup just as easily!
            Not that the tick event of this time occurs off the UI thread. If you need access to 
            UI elements, use the old DispatcherTimer
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ChevonChristieCode.Misc.CustomTimer"/> class.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.#ctor(System.TimeSpan,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ChevonChristieCode.Misc.CustomTimer"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.InitializeTimer(System.TimeSpan,System.Object)">
            <summary>
            Initializes the timer.
            </summary>
            <param name="time">The time.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ChevonChristieCode.Misc.CustomTimer"/> class.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.ChangeInterval(System.TimeSpan)">
            <summary>
            Changes the interval.
            </summary>
            <param name="newInterval">The new interval.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.InternalTimerTicked(System.Object)">
            <summary>
            Internals the timer ticked.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CustomTimer.StartOrStop(System.Boolean)">
            <summary>
            Starts the or stop.
            </summary>
            <param name="shouldStart">if set to <c>true</c> [should start].</param>
        </member>
        <member name="P:ChevonChristieCode.Misc.CustomTimer.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>
            The interval.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ChevonChristieCode.Media.ClipBound.ToBoundsProperty" -->
        <member name="M:ChevonChristieCode.Media.ClipBound.ClipToBounds(System.Windows.FrameworkElement)">
            <summary>
            Creates a rectangular clipping geometry which matches the geometry of the
            passed element
            </summary>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.UpdateIfLargerOrAdd(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            Updates if larger or add.
            </summary>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.UpdateIfLargerOrAdd(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.UInt32)">
            <summary>
            Updates if larger or add.
            </summary>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.UpdateOrAdd(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Updates the or add.
            </summary>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.UpdateOrAdd``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
            Updates the or add.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.Retrieve``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Retrieves the specified dict.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="DefaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.Retrieve``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
            Retrieves the specified dict.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Dict">The dict.</param>
            <param name="Key">The key.</param>
            <param name="DefaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.ParseOrDefault(System.String,System.UInt32)">
            <summary>
            Parses the or default.
            </summary>
            <param name="UnsignedInt">The unsigned int.</param>
            <param name="DefaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.InsertOrReplaceIfLarger(System.Collections.Generic.List{System.UInt32},System.UInt32,System.Int32)">
            <summary>
            Inserts if larger.
            </summary>
            <param name="TargetList">The target list.</param>
            <param name="Value">The value.</param>
            <param name="maxListSize">Size of the max.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.Remove``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Remove items based on predicate function
            </summary>
            <typeparam name="T">Type of items in collection</typeparam>
            <param name="list">target collection</param>
            <param name="predicate">predicate function to decide what to remove</param>
            <param name="removeAll">determines whether or not all matching items are removed</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.ExtensionsAndHelpers.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Removes the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <param name="removeAll">if set to <c>true</c> [remove all].</param>
            <returns></returns>
        </member>
        <member name="T:ChevonChristieCode.Data.SQLCEDatabase">
            <summary>
            This class provides synchronized access to a SQLCE database for multithreaded scenarios.
            SQL CE doesn't like to be queried by multiple threads, and this quickly becomes an issue with 
            apps that include synchronizing data in the background and reading data to present to the UI.
            Use BeginDatabaseInteraction to block all other threads, except the current, from access the database
            Use EndDatabaseInteraction when all databse queries/actions have been completed to allow other threads to access.
            Note that when accessing from the UI Thread one should use BeingUIDatabaseInteraction and EndUIDatabaseInteraction
            these methods have higher priority that the regular Begin and End, and will trump other threads when it comes to
            accessing the database - this way the UI does not have to wait as long.
            Note - Do not call any Begin method twice before calling end, you will get a deadlock
            Note - Methods internal to the database call Begin and End automatically. You are only responsible for using begin and end when directly
            accessing databse tables
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:CardManagerDB"/> class.
            </summary>
            <param name="fileOrConnection">The file or connection.</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
            <summary>
            Initializes a new instance of the <see cref="!:CardManagerDB"/> class.
            </summary>
            <param name="fileOrConnection">The file or connection.</param>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.InitializeDatabase">
            <summary>
            Initializes the database.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.CreateMyDatabase">
            <summary>
            Creates my database.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.DatabaseExists(System.Boolean)">
            <summary>
            Databases the exists.
            </summary>
            <param name="overrideResult">if set to <c>true</c> [override result].</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.BeginDatabaseInteraction">
            <summary>
            Begins the database interaction.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.InternalBeginDatabaseInteraction">
            <summary>
            Internals the begin database interaction.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.EndDatabaseInteraction">
            <summary>
            Ends the database interaction.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.BeginUIDatabaseInteraction">
            <summary>
            Begins the UI database interaction.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.EndUIDatabaseInteraction(System.Boolean)">
            <summary>
            Ends the UI database interaction.
            </summary>
            <param name="endUIAccess">if set to <c>true</c> [end UI access].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.SubmitChanges">
            <summary>
            Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <param name="useUIPriority">if set to <c>true</c> [use UI priority].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.InsertCollectionIntoStore``1(System.Collections.Generic.IEnumerable{``0},System.Data.Linq.Table{``0},System.Boolean)">
            <summary>
            Inserts the collection into store.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="table">The table.</param>
            <param name="saveNow">if set to <c>true</c> [save now].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.DeleteCollectionFromStore``1(System.Collections.Generic.IEnumerable{``0},System.Data.Linq.Table{``0},System.Boolean)">
            <summary>
            Deletes the collection from store.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="table">The table.</param>
            <param name="saveNow">if set to <c>true</c> [save now].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.Insert``1(``0,System.Data.Linq.Table{``0},System.Boolean)">
            <summary>
            Inserts the specified item.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="table">The table.</param>
            <param name="saveNow">if set to <c>true</c> [save now].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.Delete``1(``0,System.Data.Linq.Table{``0},System.Boolean)">
            <summary>
            Deletes the specified item.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="table">The table.</param>
            <param name="saveNow">if set to <c>true</c> [save now].</param>
        </member>
        <member name="M:ChevonChristieCode.Data.SQLCEDatabase.DeleteAllTables">
            <summary>
            Deletes all tables.
            </summary>
            <remarks>No need to call BeginDatabseInteraction. It is called internally.</remarks>
            <returns></returns>
        </member>
        <member name="P:ChevonChristieCode.Data.SQLCEDatabase.GlobalInstance">
            <summary>
            Gets the scan biz cards data base.
            </summary>
        </member>
        <member name="T:ChevonChristie.Extentions.IO.IOHelpers">
            <summary>
            Stream and Data Saving/Loading Helpers
            </summary>
        </member>
        <member name="M:ChevonChristie.Extentions.IO.IOHelpers.ReadToEndExtension(System.IO.Stream)">
            <summary>
            Reads to end.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.IO.IOHelpers.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads to end.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.IO.IOHelpers.DeSerializeData``1(System.String,``0)">
            <summary>
            Datas the load serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileLocation">The file location.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.IO.IOHelpers.SerializeData``1(System.String,``0)">
            <summary>
            Serializes the data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileLocation">Name of the file.</param>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristie.Extentions.IO.IOHelpers.DateTimeNowToFileName">
            <summary>
            Dates the name of the time now to file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.GetWords(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            //parameter sytntax with "this" and static declaration of method marks it as extension
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="capitalizeWords">if set to <c>true</c> [capitalize words].</param>
            <param name="reverseOrder">if set to <c>true</c> [reverse order].</param>
            <param name="reverseWords">if set to <c>true</c> [reverse words].</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.CapitalizeWords(System.Collections.Generic.List{System.String})">
            <summary>
            Capitalizes the words.
            </summary>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.ReverseOrder(System.Collections.Generic.List{System.String})">
            <summary>
            Reverses the order.
            </summary>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.ReverseWords(System.Collections.Generic.List{System.String})">
            <summary>
            Reverses the words.
            </summary>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.ReverseWord(System.String)">
            <summary>
            Reverses the word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.ToStringReversed(System.Object)">
            <summary>
            Extended Method to revervse string version of a variable.
            parameter sytntax with "this" and static declaration of method marks it as extension
            </summary>
            <param name="inputObject">The input object.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.AsSentence(System.Collections.Generic.List{System.String})">
            <summary>
            //parameter sytntax with "this" and static declaration of method marks it as extension
            </summary>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.WordProcessor.UpperCaseFirstLetter(System.String)">
            <summary>
            Uppers the case first letter.
            </summary>
            <param name="StringToUpperCase">The string to upper case.</param>
            <returns></returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.GetHtmlText.GetInnerHtmltext(System.String)">
            <summary>
            Gets the inner htmltext.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:ChevonChristieCode.Media.WP7ImageZoomer">
            <summary>
            Allows you to zoom images displayed in an image control
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.OnPinchStarted(System.Object,Microsoft.Phone.Controls.PinchStartedGestureEventArgs)">
            <summary>
            Initializes the zooming operation
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.OnPinchDelta(System.Object,Microsoft.Phone.Controls.PinchGestureEventArgs)">
            <summary>
            Computes the scaling and translation to correctly zoom around your fingers.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.OnDragDelta(System.Object,Microsoft.Phone.Controls.DragDeltaGestureEventArgs)">
            <summary>
            Moves the image around following your finger.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.OnDoubleTap(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Resets the image scaling and position
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.GetTranslationDelta(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Computes the translation needed to keep the image centered between your fingers.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.UpdateImageScale(System.Double,System.Windows.Controls.Image,ChevonChristieCode.Media.ImageZoomerSettings)">
            <summary>
            Updates the scaling factor by multiplying the delta.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.ApplyScale(System.Windows.Controls.Image,ChevonChristieCode.Media.ImageZoomerSettings)">
            <summary>
            Applies the computed scale to the image control.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.ResetImagePosition(System.Windows.Controls.Image,ChevonChristieCode.Media.ImageZoomerSettings)">
            <summary>
            Resets the zoom to its original scale and position
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.IsDragValid(System.Double,System.Windows.Point,System.Windows.Controls.Image,ChevonChristieCode.Media.ImageZoomerSettings,System.Boolean@)">
            <summary>
            Checks that dragging by the given amount won't result in empty space around the image
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Media.WP7ImageZoomer.IsScaleValid(System.Double,ChevonChristieCode.Media.ImageZoomerSettings)">
            <summary>
            Tells if the scaling is inside the desired range
            </summary>
        </member>
        <member name="T:ChevonChristieCode.Misc.RandomPassword">
            <summary>
            This class can generate random passwords, which do not include ambiguous 
            characters, such as I, l, and 1. The generated password will be made of
            7-bit ASCII symbols. Every four characters will include one lower case
            character, one upper case character, one number, and one special symbol
            (such as '%') in a random order. The password will always start with an
            alpha-numeric character; it will not start with a special symbol (we do
            this because some back-end systems do not like certain special
            characters in the first position).
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.RandomPassword.Generate">
            <summary>
            Generates a random password.
            </summary>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:ChevonChristieCode.Misc.RandomPassword.Generate(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">
            Exact password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
        </member>
        <member name="M:ChevonChristieCode.Misc.RandomPassword.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">
            Minimum password length.
            </param>
            <param name="maxLength">
            Maximum password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:ChevonChristieCode.Misc.RandomPasswordTest">
            <summary>
            Illustrates the use of the RandomPassword class.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.RandomPasswordTest.Main(System.String[])">
             <summary>
             The main entry point for the application.
             </summary>
            [STAThread]
        </member>
        <member name="M:ChevonChristieCode.Misc.CommonHelpers.OutputError(System.String)">
            <summary>
            Outputs the error.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.CommonHelpers.OutputBegin">
            <summary>
            Outputs the begin.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CommonHelpers.OutputEnd">
            <summary>
            Outputs the end.
            </summary>
        </member>
        <member name="M:ChevonChristieCode.Misc.CommonHelpers.OutputError(System.Exception)">
            <summary>
            Outputs the error.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:ChevonChristieCode.Misc.LongUINameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An the max length to display before replacing remainder of letters with "..."</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
    </members>
</doc>
